{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fedora Post install process","text":""},{"location":"chapter1/1_postinstall/","title":"Post Installation","text":""},{"location":"chapter1/1_postinstall/#gnome-tweak","title":"Gnome tweak","text":"<pre><code>sudo dnf install gnome-tweaks\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-vs-code-editor","title":"Install VS code Editor","text":"<pre><code>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\necho -e \"[code]\\nname=Visual Studio Code\\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" | sudo tee /etc/yum.repos.d/vscode.repo &gt; /dev/null\n</code></pre> <pre><code>dnf check-update\nsudo dnf install code\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-nerd-fonts","title":"Install NERD Fonts","text":"<p>Download or install the Nerd Fonts with the Nerd Fonts Installer script. To install Nerd Fonts, run the following script.</p> <pre><code>bash -c  \"$(curl -fsSL https://raw.githubusercontent.com/officialrajdeepsingh/nerd-fonts-installer/main/install.sh)\"\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-python3","title":"Install python3","text":"<pre><code>sudo dnf install python3 pyhon3-pip python3-devel\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-nodejs","title":"Install NodeJs","text":"<pre><code>sudo dnf install nodejs\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-arduino-ide2","title":"Install Arduino IDE2","text":"<p>https://flathub.org/apps/cc.arduino.IDE2</p> <pre><code>sudo pip3 install pyserial\nsudo usermod -aG dialout sysadmin\n</code></pre>"},{"location":"chapter1/1_postinstall/#arduino-esp32-git-core","title":"Arduino Esp32 Git core","text":"<p>https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html</p> <p><pre><code>https://espressif.github.io/arduino-esp32/package_esp32_index.json\n</code></pre> - copy link to arduino ide preference</p> <p></p>"},{"location":"chapter1/1_postinstall/#kvm-and-vagrant","title":"KVM and Vagrant","text":"<pre><code>egrep -c '(vmx|svm)' /proc/cpuinfo\nsudo dnf install @virtualization\n\nsudo dnf install qemu-kvm libvirt libvirt-client virt-top virt-install virt-manager virt-viewer libguestfs-tools\n\nsudo dnf install libvirt libvirt-daemon-kvm qemu-kvm virt-manager guestfs-browser libguestfs-tools python-libguestfs virt-top virt-install bridge-utils virt-viewer\n</code></pre> <pre><code>sudo systemctl start libvirtd\nsudo systemctl enable libvirtd \nsudo usermod -aG libvirt sysadmin\n\nsudo virsh list --all \n</code></pre> <p>Open the file /etc/libvirt/libvirtd.conf</p> <pre><code>sudo vim /etc/libvirt/libvirtd.conf\n\nSet the UNIX domain socket group ownership to libvirt, (around line 85)\n\nunix_sock_group = \u201clibvirt\u201d\n\nSet the UNIX socket permissions for the R/W socket (around line 108)\n\nunix_sock_rw_perms = \u201c0770\u201d\n\nRestart libvirt daemon after making the change.\n\nsudo systemctl restart libvirtd.service\n</code></pre> <pre><code>sudo dnf install vagrant\nvagrant plugin install vagrant-libvirt\nvagrant box add generic/centos9s\n</code></pre> <p>Error: The rpm for Fedora defaults the connection to libvirt to use the session connection qemu:///session which does not support creating networks, though you can use networks that have been already created.</p> <pre><code>Network 192.168.33.10 is not available. Specify available network\nname, or an ip address if you want to create a new network.\n\n\nVagrant.configure(\"2\") do |config|\n  config.vm.provider :libvirt do |libvirt|\n    libvirt.qemu_use_session = false\n    # if the above doesn't work, try uncommenting the following instead\n    #libvirt.uri = 'qemu:///system'\n  end\nend\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-thai-language-fonts","title":"Install Thai Language Fonts","text":"<pre><code>sudo dnf install tlwg-*\nsudo dnf install  google-noto-sans-thai-fonts ibm-plex-sans-thai-fonts thai-arundina-sans-fonts  thai-arundina-sans-mono-fonts thai-arundina-serif-fonts\n</code></pre> <p>https://github.com/opendevbook/thai-font-collection</p> <p>install windows fonts <pre><code>sudo dnf install curl cabextract xorg-x11-font-utils fontconfig -y\nsudo rpm -i https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm\n</code></pre></p>"},{"location":"chapter1/1_postinstall/#starship","title":"starship","text":"<p>https://starship.rs/</p> <pre><code>curl -sS https://starship.rs/install.sh | sh \n</code></pre>"},{"location":"chapter1/1_postinstall/#install-multi-media","title":"Install Multi Media","text":"<pre><code>sudo dnf install vlc\n\nsudo dnf install gstreamer1-plugins-{bad-\\*,good-\\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel\n\nsudo dnf install lame\\* --exclude=lame-devel\n</code></pre>"},{"location":"chapter1/1_postinstall/#install-chromne","title":"Install Chromne","text":"<pre><code>sudo dnf install fedora-workstation-repositories\nsudo dnf install google-chrome-stable\n</code></pre>"},{"location":"chapter1/1_postinstall/#escalidraw","title":"Escalidraw","text":"<p><pre><code>docker run -p 8080:80 -d docker.io/excalidraw/excalidraw:latest\n</code></pre> Now that Excalidraw is running as a Docker container, you can access it through a web browser by navigating to http://yourp:8080. <pre><code>http://yourip:8080\n</code></pre></p>"},{"location":"chapter1/2_nvcard/","title":"Install NVChard  IDE","text":"<p>https://nvchad.com/</p> <pre><code>sudo dnf install neovim ripgrep\n\nrm -rf ~/.config/nvim\nrm -rf ~/.local/state/nvim\nrm -rf ~/.local/share/nvim\n\ngit clone https://github.com/NvChad/starter ~/.config/nvim &amp;&amp; nvim\n\nnvim\n</code></pre>"},{"location":"chapter1/git-fix/","title":"Error","text":"<p>The error message you're seeing indicates that your local main branch is behind the remote main branch on GitHub. This means that there are changes in the remote repository that you don't have in your local repository, and Git is preventing you from pushing your changes to avoid overwriting those updates.</p> <pre><code> ! [rejected]        main -&gt; main (non-fast-forward)\nerror: failed to push some refs to 'github.com:opendevbook/Fedora41.git\n</code></pre>"},{"location":"chapter1/git-fix/#heres-how-to-resolve-the-issue","title":"Here\u2019s how to resolve the issue:","text":"<p>Fetch the latest changes from the remote:</p> <p><pre><code>git fetch origin\n</code></pre> Merge the remote changes into your local branch:</p> <pre><code>git merge origin/main\n</code></pre> <p>If there are merge conflicts, you'll need to resolve them. Git will guide you through that process.</p> <p>After resolving any conflicts and committing the merge, you can push your changes:</p> <pre><code>git push origin main\n</code></pre> <p>Alternatively, if you want to incorporate the changes from the remote without creating a merge commit, you can use rebase instead of merge:</p> <p>Fetch the latest changes: <pre><code>git fetch origin\n</code></pre> Rebase your local changes on top of the remote changes:</p> <pre><code>git rebase origin/main\n</code></pre> <p>If there are conflicts during the rebase, resolve them, and then continue the rebase with:</p> <p><pre><code>git rebase --continue\n</code></pre> Once the rebase is complete, push your changes:</p> <p><pre><code>git push origin main\n</code></pre> Choose the method that you prefer based on your workflow! If you're collaborating with others, it's often best to coordinate how you handle merges and rebases.</p>"},{"location":"chapter1/framework/thingsboard/","title":"Thingsboard Build","text":"<pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n$script = &lt;&lt;-EOF\n  sudo dnf update -y\n  sudo firewall-cmd --permanent --add-port=8080/tcp\n  sudo firewall-cmd --permanent --add-port=1883/tcp \n  sudo firewall-cmd --permanent --add-port=5432/tcp \n  sudo firewall-cmd --permanent --add-port=80/tcp \n  sudo firewall-cmd --reload\n\n  sudo dnf -y install java-17-openjdk java-17-openjdk-devel\n  sudo dnf -y install maven \n\n  echo \"&gt;&gt; Java Version: \"\n  sudo java --version \nEOF\n\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"generic/centos9s\"\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n\n  config.vm.provider \"libvirt\" do |libvirt|\n     libvirt.qemu_use_session = false\n     libvirt.driver=\"kvm\"\n     libvirt.memory = \"8192\"\n     libvirt.cpus = 4\n  end\n  config.vm.provision \"shell\", inline: $script\nend\n</code></pre> <pre><code>sudo alternaive --config java\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk-17.0.11.0.9-2.el9.x86_64/\nexport PATH=$PATH:$JAVA_HOME/bin\n</code></pre> <pre><code>git clone -b release-3.8 https://github.com/thingsboard/thingsboard.git--depth 1\n</code></pre> <pre><code>sudo dnf module reset nodejs \nsudo dnf module -y enable nodejs:18 \nsudo dnf module -y install nodejs:18/common\n</code></pre> <pre><code>sudo npm install -g yarn\nsudo npm install -g cross-env \nsudo npm install -g webpack\n\ncd ui-ngx\nyarn install \nyarn run build:prod\n\ncd ..\nmvn clean install -DskipTests\n</code></pre>"}]}